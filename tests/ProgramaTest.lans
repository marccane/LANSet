tipus
	natural: enter;
	
	vec_E_1K: vector enter mida 1000 inici 0;

	NIF: tupla
		enter numero;
		car lletra;
	ftupla;
	
	punt2D: tupla
		real x;
		real y;
	ftupla;
	
	
ftipus

/*
	Pre: rep un nombre 'n' major o igual a 1
	Post: retorna n!
*/
funcio factorial(enter n) retorna enter;


/*
	Pre: n >= 1
	Post: escriu per pantalla els moviments necessaris per moure els n discos de 'origen' a 'desti'
*/
accio hanoi(enter n, car origen, car desti, car aux);


/*
	Pre: rep un vector d'enters 'v' de mida 'n',  amb 1 <= n <= 1000
	Post: assigna el minim, maxim i mitjana dins les corresponents variables d'entrada i sortida
*/
accio estadistiques(vec_E_1K v, ent enter n, entsor enter min, entsor enter max, entsor real mitjana);


/*
	Pre:
	Post: retora l'area del rectangle paral.lel amb la recta x=0 que te com a vertex oposats p1 i p2
*/
funcio area(punt2D p1, punt2D p2) retorna real;

constants
	real PI = 3.14159;
	real AVOGADRO = 6.022E23;
fconstants




//============= Programa principal ================
programa ProgramaTest
variables
	NIF nif;
	car c;
	natural x;
	enter n;
	enter e;
	vec_E_1K v;
	punt2D p1;
	punt2D p2;
	enter min;
	enter max;
	enter mitjana;
fvariables


p1.x = 2;
p1.y = PI;
p2.x = 0.1;
p2.y = 9.8;
escriureln(area(p1,p2));


escriureln(factorial(10+5-3*2 + 14%2 - 11\2));



escriure("Entra un numero de NIF: ");
llegir(x);
escriure("Entra una lletra de NIF: ");
llegir(c);

nif.numero = x;
nif.lletra = c;

escriureln("El NIF entrat es ", nif.numero, nif.lletra);
escriureln();





escriure("Entra un nombre de discos: ");
llegir(n);
escriure("Hanoi. Moure  ", n, " discos de A a B:");
hanoi(n,'A','B','C');
escriureln();



escriure("Entra una sequencia de com a molt 1000 nombres majors que 0. Per acabar entra un nombre <= 0");
llegir(x);
n=0;
mentre no (x <= 0) fer
	v[n] = x;
	llegir(x);
	n=n+1;
fmentre

estadistiques(v,n,min,max,mitjana);
escriureln("min max mitjana = ", min, " ", max, " " , mitjana);

fprograma








funcio factorial(enter n) retorna enter
	retorna n>1 ? n*factorial(n-1) : 1;
ffuncio



funcio area(punt2D p1, punt2D p2) retorna real
	retorna (p1.x < p2.x)
			?	(p1.y < p2.y)
				?	(p2.x - p1.x) * (p2.y - p1.y) 
				:	 (p2.x - p1.x) * (p1.y - p2.y)
			:	(p1.y < p2.y)
				?	(p1.x - p2.x) * (p2.y - p1.y) 
				:	 ~(p2.x - p1.x) * (p1.y - p2.y);
				
ffuncio



accio hanoi(enter n, car origen, car desti, car aux)
	//Cas base
	si n== 1 llavors
		escriureln("Moure disc ", n, " de ", origen, " a", desti);
	//Cas recursiu
	altrament
		hanoi(n-1,origen,aux,desti);
		escriureln("Moure disc ", n, " de ", origen, " a", desti);
		hanoi(n-1,aux,desti,origen);
	fsi
faccio





accio estadistiques(vec_E_1K v, ent enter n, entsor enter min, entsor enter max, entsor real mitjana)
	variables
		enter suma;
		enter i;
	fvariables
	
	//Inicialitzem els valors abans del recorregut
	min = v[0];
	max = v[0];
	suma = v[0];

	per i de 1 fins n-1 fer
		si v[i] < min llavors min = v[i]; fsi
		si v[i] > max llavors max = v[i]; fsi
		suma = suma + v[i];
	fper
	
	mitjana = suma / n;

faccio
